# Including FROM openjdk:17-jdk-alpine in a Dockerfile sets the base image for the Docker container being built as the Alpine Linux distribution with OpenJDK 17 installed.

# Alpine Linux is a lightweight Linux distribution known for its small size, simplicity, and security. It is commonly used as a base image for Docker containers due to its small footprint, which makes it well-suited for running in resource-constrained environments.

# OpenJDK is an open-source implementation of the Java Development Kit (JDK), which is required to run Java-based applications. By using the openjdk:17-jdk-alpine image, we ensure that our container has the necessary Java runtime environment installed, which enables it to run Java-based applications.

# Using a specific version of the OpenJDK image, such as openjdk:17-jdk-alpine, allows us to control the environment in which our application is running, ensuring that it is using a specific version of Java with known compatibility and security features. Additionally, using a pre-built base image like this saves time and resources by not having to install Java from scratch each time we build a new container.
# at first need to right click 

    # then docker compose up --build in the terminal after initial build
# In summary, including FROM openjdk:17-jdk-alpine in a Dockerfile sets up a lightweight Alpine Linux-based environment with Java already installed, providing a solid foundation for running Java-based applications in a Docker container.
FROM openjdk:17-jdk-alpine
EXPOSE 8082
#  the VOLUME instruction does not actually create the volume itself, but rather creates a mount point for the volume in the container's filesystem. The volume itself must be created separately at runtime, either using the docker volume create command or by using a Docker-compose file.
# including VOLUME /temp in a Dockerfile creates a mount point for a volume in the container's filesystem that can be used to store temporary data generated by the application running inside the container.
VOLUME /temp
# including RUN mkdir -p /app/ in a Dockerfile creates a directory inside the container's filesystem that can be used to store application code and files, and helps to keep the filesystem organized. The -p flag ensures that any necessary parent directories are also created if they do not exist. This is useful for ensuring that the directory is created even if some of its parent directories are missing.
RUN mkdir -p /app/
RUN mkdir -p /app/logs/
COPY build/libs/expensetracker-0.0.1-SNAPSHOT.jar /expensetracker-0.0.1-SNAPSHOT.jar
# /app/app.jar
ENTRYPOINT ["java", "-jar", "expensetracker-0.0.1-SNAPSHOT.jar"]

