# version: '3.8'
services:
  
  appointment-service:
    container_name: appointment-service
    build:
      context: ./appointmentService
      dockerfile: Dockerfile
    depends_on:
      - appointment-db
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://appointment-db:3306/APPOINTMENT_DB
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: user
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQLDialect
    networks:
      - appointment-network

  appointment-db:
    container_name: appointment-db
    build:
      context: ./appointmentDB
      dockerfile: Dockerfile
    volumes:
      - appointment_data:/var/lib/mysql
    ports:
      - 3306:3306
    environment:
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQLDialect
      MYSQL_ROOT_PASSWORD: root
      MYSQL_USER: user
      MYSQL_PASSWORD: user
      MYSQL_DATABASE: APPOINTMENT_DB
    networks:
      - appointment-network

  # user-service:
  #   container_name: user-service
  #   build:
  #     context: ./userService
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - user-db
  #   ports:
  #     - "8083:8083"
  #   environment:
  #     SPRING_DATASOURCE_URL: jdbc:mysql://user-db:3307/USER_DB
  #     SPRING_DATASOURCE_DRIVER_CLASS_NAME: com.mysql.cj.jdbc.Driver
  #     SPRING_DATASOURCE_USERNAME: user
  #     SPRING_DATASOURCE_PASSWORD: user
  #     SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQLDialect
  #   networks:
  #     - workout-network

  # user-db:
  #   container_name: user-db
  #   build:
  #     context: ./userDB
  #     dockerfile: Dockerfile
  #   volumes:
  #     - user_data:/var/lib/mysql
  #   ports:
  #     - 3307:3307
  #   environment:
  #     SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQLDialect
  #     MYSQL_ROOT_PASSWORD: root
  #     MYSQL_USER: user
  #     MYSQL_PASSWORD: user
  #     MYSQL_DATABASE: USER_DB
  #   networks:
  #     - workout-network

volumes:
  # user_data:
  appointment_data:

networks:
  appointment-network:
    driver: bridge
