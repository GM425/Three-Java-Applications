FROM openjdk:17-jdk-alpine
EXPOSE 8082
#  the VOLUME instruction does not actually create the volume itself, but rather creates a mount point for the volume in the container's filesystem. The volume itself must be created separately at runtime, either using the docker volume create command or by using a Docker-compose file.
# including VOLUME /temp in a Dockerfile creates a mount point for a volume in the container's filesystem that can be used to store temporary data generated by the application running inside the container.
VOLUME /temp
# including RUN mkdir -p /app/ in a Dockerfile creates a directory inside the container's filesystem that can be used to store application code and files, and helps to keep the filesystem organized. The -p flag ensures that any necessary parent directories are also created if they do not exist. This is useful for ensuring that the directory is created even if some of its parent directories are missing.
RUN mkdir -p /app/
RUN mkdir -p /app/logs/
COPY build/libs/recordservice-0.0.1-SNAPSHOT.jar /recordservice-0.0.1-SNAPSHOT.jar
# /app/app.jar
ENTRYPOINT ["java", "-jar", "recordservice-0.0.1-SNAPSHOT.jar"]